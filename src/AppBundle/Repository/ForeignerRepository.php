<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Foreigner;
use AppBundle\Entity\Operation;
use Doctrine\ORM\EntityRepository;

/**
 * \class ForeignerRepository
 * @ingroup Acoustique
 * @package AppBundle\Repository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ForeignerRepository extends EntityRepository
{
    /**
     * @returns find one (only one) F data for sheetid and operation
     * @param Operation $operation
     * @param $idOfSheet
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findOneByIdOfSheetAndOperation(Operation $operation, $idOfSheet){
        return $this->getEntityManager()
            ->getRepository(Foreigner::class)
            ->createQueryBuilder('a')
            ->where('a.idOfSheet = :idOfSheet')
            ->andWhere('a.operation = :operation')
            ->setParameters(
                [
                    'idOfSheet' => $idOfSheet,
                    'operation' => $operation,
                ]
            )
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param Operation $operation
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findOneByOperation(Operation $operation){
        return $this->getEntityManager()
            ->getRepository(Foreigner::class)
            ->createQueryBuilder('a')
            ->where('a.operation = :operation')
            ->setParameter('operation', $operation)
            ->getQuery()
            ->getOneOrNullResult();
    }
    /**
     * @param Operation $operation
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findAllByOperation(Operation $operation){
        return $this->getEntityManager()
            ->getRepository(Foreigner::class)
            ->createQueryBuilder('a')
            ->where('a.operation = :operation')
            ->setParameter('operation', $operation)
            ->getQuery()
            ->getResult();
    }
}
